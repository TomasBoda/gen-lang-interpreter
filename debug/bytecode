BYTECODE
------------------------------
object queue {
------------------------------
0: (line 2) LOAD_CONST
1: (line 2) 0
2: (line 2) 0
3: (line 2) OBJ_DEF
------------------------------
var data = [];
------------------------------
4: (line 3) LOAD_CONST
5: (line 3) 1
6: (line 3) 0
7: (line 3) ARRAY_DEF
8: (line 3) LOAD_CONST
9: (line 3) 2
10: (line 3) 0
11: (line 3) INIT_PROP
------------------------------
}
------------------------------
12: (line 4) OBJ_END
------------------------------
func queue_is_empty(var queue) {
------------------------------
13: (line 6) LOAD_CONST
14: (line 6) 3
15: (line 6) 0
16: (line 6) FUNC_DEF
17: (line 6) LOAD_CONST
18: (line 6) 4
19: (line 6) 0
20: (line 6) DECLARE_VAR
------------------------------
return |queue.data| == 0;
------------------------------
21: (line 7) LOAD_CONST
22: (line 7) 5
23: (line 7) 0
24: (line 7) LOAD_VAR
25: (line 7) LOAD_CONST
26: (line 7) 6
27: (line 7) 0
28: (line 7) LOAD_PROP_CONST
29: (line 7) SIZEOF
30: (line 7) LOAD_CONST
31: (line 7) 7
32: (line 7) 0
33: (line 7) CMP_EQ
34: (line 7) RETURN
------------------------------
}
------------------------------
35: (line 8) LOAD_CONST
36: (line 8) 8
37: (line 8) 0
38: (line 8) RETURN
39: (line 8) FUNC_END
------------------------------
func queue_enqueue(var queue, var value) {
------------------------------
40: (line 10) LOAD_CONST
41: (line 10) 9
42: (line 10) 0
43: (line 10) FUNC_DEF
44: (line 10) LOAD_CONST
45: (line 10) 10
46: (line 10) 0
47: (line 10) DECLARE_VAR
48: (line 10) LOAD_CONST
49: (line 10) 11
50: (line 10) 0
51: (line 10) DECLARE_VAR
------------------------------
var new_queue = [value];
------------------------------
52: (line 11) LOAD_CONST
53: (line 11) 12
54: (line 11) 0
55: (line 11) LOAD_VAR
56: (line 11) LOAD_CONST
57: (line 11) 13
58: (line 11) 0
59: (line 11) ARRAY_DEF
60: (line 11) LOAD_CONST
61: (line 11) 14
62: (line 11) 0
63: (line 11) DECLARE_VAR
------------------------------
var i = 0;
------------------------------
64: (line 13) LOAD_CONST
65: (line 13) 15
66: (line 13) 0
67: (line 13) LOAD_CONST
68: (line 13) 16
69: (line 13) 0
70: (line 13) DECLARE_VAR
------------------------------
while (i < |queue.data|) {
------------------------------
71: (line 14) LOAD_CONST
72: (line 14) 17
73: (line 14) 0
74: (line 14) LOAD_VAR
75: (line 14) LOAD_CONST
76: (line 14) 18
77: (line 14) 0
78: (line 14) LOAD_VAR
79: (line 14) LOAD_CONST
80: (line 14) 19
81: (line 14) 0
82: (line 14) LOAD_PROP_CONST
83: (line 14) SIZEOF
84: (line 14) CMP_LT
85: (line 14) LOAD_CONST
86: (line 14) 30
87: (line 14) 0
88: (line 14) JUMP_IF_FALSE
------------------------------
new_queue = new_queue + queue.data[i];
------------------------------
89: (line 15) LOAD_CONST
90: (line 15) 21
91: (line 15) 0
92: (line 15) LOAD_VAR
93: (line 15) LOAD_CONST
94: (line 15) 22
95: (line 15) 0
96: (line 15) LOAD_VAR
97: (line 15) LOAD_CONST
98: (line 15) 23
99: (line 15) 0
100: (line 15) LOAD_PROP_CONST
101: (line 15) LOAD_CONST
102: (line 15) 24
103: (line 15) 0
104: (line 15) LOAD_VAR
105: (line 15) ARRAY_GET
106: (line 15) ADD
107: (line 15) LOAD_CONST
108: (line 15) 25
109: (line 15) 0
110: (line 15) STORE_VAR
------------------------------
i = i + 1;
------------------------------
111: (line 16) LOAD_CONST
112: (line 16) 26
113: (line 16) 0
114: (line 16) LOAD_VAR
115: (line 16) LOAD_CONST
116: (line 16) 27
117: (line 16) 0
118: (line 16) ADD
119: (line 16) LOAD_CONST
120: (line 16) 28
121: (line 16) 0
122: (line 16) STORE_VAR
------------------------------
}
------------------------------
123: (line 17) LOAD_CONST
124: (line 17) 29
125: (line 17) 0
126: (line 17) JUMP
------------------------------
queue.data = new_queue;
------------------------------
127: (line 19) LOAD_CONST
128: (line 19) 31
129: (line 19) 0
130: (line 19) LOAD_VAR
131: (line 19) LOAD_CONST
132: (line 19) 32
133: (line 19) 0
134: (line 19) LOAD_VAR
135: (line 19) LOAD_CONST
136: (line 19) 33
137: (line 19) 0
138: (line 19) STORE_PROP
------------------------------
}
------------------------------
139: (line 20) LOAD_CONST
140: (line 20) 34
141: (line 20) 0
142: (line 20) RETURN
143: (line 20) FUNC_END
------------------------------
func queue_dequeue(var queue) {
------------------------------
144: (line 22) LOAD_CONST
145: (line 22) 35
146: (line 22) 0
147: (line 22) FUNC_DEF
148: (line 22) LOAD_CONST
149: (line 22) 36
150: (line 22) 0
151: (line 22) DECLARE_VAR
------------------------------
var value = queue.data[|queue.data| - 1];
------------------------------
152: (line 23) LOAD_CONST
153: (line 23) 37
154: (line 23) 0
155: (line 23) LOAD_VAR
156: (line 23) LOAD_CONST
157: (line 23) 38
158: (line 23) 0
159: (line 23) LOAD_PROP_CONST
160: (line 23) LOAD_CONST
161: (line 23) 39
162: (line 23) 0
163: (line 23) LOAD_VAR
164: (line 23) LOAD_CONST
165: (line 23) 40
166: (line 23) 0
167: (line 23) LOAD_PROP_CONST
168: (line 23) SIZEOF
169: (line 23) LOAD_CONST
170: (line 23) 41
171: (line 23) 0
172: (line 23) SUB
173: (line 23) ARRAY_GET
174: (line 23) LOAD_CONST
175: (line 23) 42
176: (line 23) 0
177: (line 23) DECLARE_VAR
------------------------------
queue.data = queue.data - 1;
------------------------------
178: (line 24) LOAD_CONST
179: (line 24) 43
180: (line 24) 0
181: (line 24) LOAD_VAR
182: (line 24) LOAD_CONST
183: (line 24) 44
184: (line 24) 0
185: (line 24) LOAD_VAR
186: (line 24) LOAD_CONST
187: (line 24) 45
188: (line 24) 0
189: (line 24) LOAD_PROP_CONST
190: (line 24) LOAD_CONST
191: (line 24) 46
192: (line 24) 0
193: (line 24) SUB
194: (line 24) LOAD_CONST
195: (line 24) 47
196: (line 24) 0
197: (line 24) STORE_PROP
------------------------------
return value;
------------------------------
198: (line 25) LOAD_CONST
199: (line 25) 48
200: (line 25) 0
201: (line 25) LOAD_VAR
202: (line 25) RETURN
------------------------------
}
------------------------------
203: (line 26) LOAD_CONST
204: (line 26) 49
205: (line 26) 0
206: (line 26) RETURN
207: (line 26) FUNC_END
------------------------------
object stack {
------------------------------
208: (line 28) LOAD_CONST
209: (line 28) 50
210: (line 28) 0
211: (line 28) OBJ_DEF
------------------------------
var data = [];
------------------------------
212: (line 29) LOAD_CONST
213: (line 29) 51
214: (line 29) 0
215: (line 29) ARRAY_DEF
216: (line 29) LOAD_CONST
217: (line 29) 52
218: (line 29) 0
219: (line 29) INIT_PROP
------------------------------
}
------------------------------
220: (line 30) OBJ_END
------------------------------
func stack_is_empty(var stack) {
------------------------------
221: (line 32) LOAD_CONST
222: (line 32) 53
223: (line 32) 0
224: (line 32) FUNC_DEF
225: (line 32) LOAD_CONST
226: (line 32) 54
227: (line 32) 0
228: (line 32) DECLARE_VAR
------------------------------
return |stack.data| == 0;
------------------------------
229: (line 33) LOAD_CONST
230: (line 33) 55
231: (line 33) 0
232: (line 33) LOAD_VAR
233: (line 33) LOAD_CONST
234: (line 33) 56
235: (line 33) 0
236: (line 33) LOAD_PROP_CONST
237: (line 33) SIZEOF
238: (line 33) LOAD_CONST
239: (line 33) 57
240: (line 33) 0
241: (line 33) CMP_EQ
242: (line 33) RETURN
------------------------------
}
------------------------------
243: (line 34) LOAD_CONST
244: (line 34) 58
245: (line 34) 0
246: (line 34) RETURN
247: (line 34) FUNC_END
------------------------------
func stack_push(var stack, var value) {
------------------------------
248: (line 36) LOAD_CONST
249: (line 36) 59
250: (line 36) 0
251: (line 36) FUNC_DEF
252: (line 36) LOAD_CONST
253: (line 36) 60
254: (line 36) 0
255: (line 36) DECLARE_VAR
256: (line 36) LOAD_CONST
257: (line 36) 61
258: (line 36) 0
259: (line 36) DECLARE_VAR
------------------------------
stack.data = stack.data + value;
------------------------------
260: (line 37) LOAD_CONST
261: (line 37) 62
262: (line 37) 0
263: (line 37) LOAD_VAR
264: (line 37) LOAD_CONST
265: (line 37) 63
266: (line 37) 0
267: (line 37) LOAD_VAR
268: (line 37) LOAD_CONST
269: (line 37) 64
270: (line 37) 0
271: (line 37) LOAD_PROP_CONST
272: (line 37) LOAD_CONST
273: (line 37) 65
274: (line 37) 0
275: (line 37) LOAD_VAR
276: (line 37) ADD
277: (line 37) LOAD_CONST
278: (line 37) 66
279: (line 37) 0
280: (line 37) STORE_PROP
------------------------------
}
------------------------------
281: (line 38) LOAD_CONST
282: (line 38) 67
283: (line 38) 0
284: (line 38) RETURN
285: (line 38) FUNC_END
------------------------------
func stack_pop(var stack) {
------------------------------
286: (line 40) LOAD_CONST
287: (line 40) 68
288: (line 40) 0
289: (line 40) FUNC_DEF
290: (line 40) LOAD_CONST
291: (line 40) 69
292: (line 40) 0
293: (line 40) DECLARE_VAR
------------------------------
var value = stack.data[|stack.data| - 1];
------------------------------
294: (line 41) LOAD_CONST
295: (line 41) 70
296: (line 41) 0
297: (line 41) LOAD_VAR
298: (line 41) LOAD_CONST
299: (line 41) 71
300: (line 41) 0
301: (line 41) LOAD_PROP_CONST
302: (line 41) LOAD_CONST
303: (line 41) 72
304: (line 41) 0
305: (line 41) LOAD_VAR
306: (line 41) LOAD_CONST
307: (line 41) 73
308: (line 41) 0
309: (line 41) LOAD_PROP_CONST
310: (line 41) SIZEOF
311: (line 41) LOAD_CONST
312: (line 41) 74
313: (line 41) 0
314: (line 41) SUB
315: (line 41) ARRAY_GET
316: (line 41) LOAD_CONST
317: (line 41) 75
318: (line 41) 0
319: (line 41) DECLARE_VAR
------------------------------
stack.data = stack.data - 1;
------------------------------
320: (line 42) LOAD_CONST
321: (line 42) 76
322: (line 42) 0
323: (line 42) LOAD_VAR
324: (line 42) LOAD_CONST
325: (line 42) 77
326: (line 42) 0
327: (line 42) LOAD_VAR
328: (line 42) LOAD_CONST
329: (line 42) 78
330: (line 42) 0
331: (line 42) LOAD_PROP_CONST
332: (line 42) LOAD_CONST
333: (line 42) 79
334: (line 42) 0
335: (line 42) SUB
336: (line 42) LOAD_CONST
337: (line 42) 80
338: (line 42) 0
339: (line 42) STORE_PROP
------------------------------
return value;
------------------------------
340: (line 43) LOAD_CONST
341: (line 43) 81
342: (line 43) 0
343: (line 43) LOAD_VAR
344: (line 43) RETURN
------------------------------
}
------------------------------
345: (line 44) LOAD_CONST
346: (line 44) 82
347: (line 44) 0
348: (line 44) RETURN
349: (line 44) FUNC_END
------------------------------
object node {
------------------------------
350: (line 46) LOAD_CONST
351: (line 46) 83
352: (line 46) 0
353: (line 46) OBJ_DEF
------------------------------
var value;
------------------------------
354: (line 47) LOAD_CONST
355: (line 47) 84
356: (line 47) 0
357: (line 47) LOAD_CONST
358: (line 47) 85
359: (line 47) 0
360: (line 47) INIT_PROP
------------------------------
var children = [];
------------------------------
361: (line 48) LOAD_CONST
362: (line 48) 86
363: (line 48) 0
364: (line 48) ARRAY_DEF
365: (line 48) LOAD_CONST
366: (line 48) 87
367: (line 48) 0
368: (line 48) INIT_PROP
------------------------------
}
------------------------------
369: (line 49) OBJ_END
------------------------------
func node_create(var value) {
------------------------------
370: (line 51) LOAD_CONST
371: (line 51) 88
372: (line 51) 0
373: (line 51) FUNC_DEF
374: (line 51) LOAD_CONST
375: (line 51) 89
376: (line 51) 0
377: (line 51) DECLARE_VAR
------------------------------
var node = new node;
------------------------------
378: (line 52) LOAD_CONST
379: (line 52) 90
380: (line 52) 0
381: (line 52) NEW_OBJ
382: (line 52) LOAD_CONST
383: (line 52) 91
384: (line 52) 0
385: (line 52) DECLARE_VAR
------------------------------
node.value = value;
------------------------------
386: (line 53) LOAD_CONST
387: (line 53) 92
388: (line 53) 0
389: (line 53) LOAD_VAR
390: (line 53) LOAD_CONST
391: (line 53) 93
392: (line 53) 0
393: (line 53) LOAD_VAR
394: (line 53) LOAD_CONST
395: (line 53) 94
396: (line 53) 0
397: (line 53) STORE_PROP
------------------------------
return node;
------------------------------
398: (line 54) LOAD_CONST
399: (line 54) 95
400: (line 54) 0
401: (line 54) LOAD_VAR
402: (line 54) RETURN
------------------------------
}
------------------------------
403: (line 55) LOAD_CONST
404: (line 55) 96
405: (line 55) 0
406: (line 55) RETURN
407: (line 55) FUNC_END
------------------------------
func tree_create() {
------------------------------
408: (line 57) LOAD_CONST
409: (line 57) 97
410: (line 57) 0
411: (line 57) FUNC_DEF
------------------------------
var r = node_create(1);
------------------------------
412: (line 58) LOAD_CONST
413: (line 58) 98
414: (line 58) 0
415: (line 58) LOAD_VAR
416: (line 58) LOAD_CONST
417: (line 58) 99
418: (line 58) 0
419: (line 58) LOAD_CONST
420: (line 58) 100
421: (line 58) 0
422: (line 58) CALL
423: (line 58) LOAD_CONST
424: (line 58) 101
425: (line 58) 0
426: (line 58) DECLARE_VAR
------------------------------
var rl = node_create(2);
------------------------------
427: (line 60) LOAD_CONST
428: (line 60) 102
429: (line 60) 0
430: (line 60) LOAD_VAR
431: (line 60) LOAD_CONST
432: (line 60) 103
433: (line 60) 0
434: (line 60) LOAD_CONST
435: (line 60) 104
436: (line 60) 0
437: (line 60) CALL
438: (line 60) LOAD_CONST
439: (line 60) 105
440: (line 60) 0
441: (line 60) DECLARE_VAR
------------------------------
var rr = node_create(3);
------------------------------
442: (line 61) LOAD_CONST
443: (line 61) 106
444: (line 61) 0
445: (line 61) LOAD_VAR
446: (line 61) LOAD_CONST
447: (line 61) 107
448: (line 61) 0
449: (line 61) LOAD_CONST
450: (line 61) 108
451: (line 61) 0
452: (line 61) CALL
453: (line 61) LOAD_CONST
454: (line 61) 109
455: (line 61) 0
456: (line 61) DECLARE_VAR
------------------------------
var rll = node_create(4);
------------------------------
457: (line 63) LOAD_CONST
458: (line 63) 110
459: (line 63) 0
460: (line 63) LOAD_VAR
461: (line 63) LOAD_CONST
462: (line 63) 111
463: (line 63) 0
464: (line 63) LOAD_CONST
465: (line 63) 112
466: (line 63) 0
467: (line 63) CALL
468: (line 63) LOAD_CONST
469: (line 63) 113
470: (line 63) 0
471: (line 63) DECLARE_VAR
------------------------------
var rlr = node_create(5);
------------------------------
472: (line 64) LOAD_CONST
473: (line 64) 114
474: (line 64) 0
475: (line 64) LOAD_VAR
476: (line 64) LOAD_CONST
477: (line 64) 115
478: (line 64) 0
479: (line 64) LOAD_CONST
480: (line 64) 116
481: (line 64) 0
482: (line 64) CALL
483: (line 64) LOAD_CONST
484: (line 64) 117
485: (line 64) 0
486: (line 64) DECLARE_VAR
------------------------------
var rrl = node_create(6);
------------------------------
487: (line 66) LOAD_CONST
488: (line 66) 118
489: (line 66) 0
490: (line 66) LOAD_VAR
491: (line 66) LOAD_CONST
492: (line 66) 119
493: (line 66) 0
494: (line 66) LOAD_CONST
495: (line 66) 120
496: (line 66) 0
497: (line 66) CALL
498: (line 66) LOAD_CONST
499: (line 66) 121
500: (line 66) 0
501: (line 66) DECLARE_VAR
------------------------------
var rrr = node_create(7);
------------------------------
502: (line 67) LOAD_CONST
503: (line 67) 122
504: (line 67) 0
505: (line 67) LOAD_VAR
506: (line 67) LOAD_CONST
507: (line 67) 123
508: (line 67) 0
509: (line 67) LOAD_CONST
510: (line 67) 124
511: (line 67) 0
512: (line 67) CALL
513: (line 67) LOAD_CONST
514: (line 67) 125
515: (line 67) 0
516: (line 67) DECLARE_VAR
------------------------------
rl.children = [rll, rlr];
------------------------------
517: (line 69) LOAD_CONST
518: (line 69) 126
519: (line 69) 0
520: (line 69) LOAD_VAR
521: (line 69) LOAD_CONST
522: (line 69) 127
523: (line 69) 0
524: (line 69) LOAD_VAR
525: (line 69) LOAD_CONST
526: (line 69) 128
527: (line 69) 0
528: (line 69) LOAD_VAR
529: (line 69) LOAD_CONST
530: (line 69) 129
531: (line 69) 0
532: (line 69) ARRAY_DEF
533: (line 69) LOAD_CONST
534: (line 69) 130
535: (line 69) 0
536: (line 69) STORE_PROP
------------------------------
rr.children = [rrl, rrr];
------------------------------
537: (line 70) LOAD_CONST
538: (line 70) 131
539: (line 70) 0
540: (line 70) LOAD_VAR
541: (line 70) LOAD_CONST
542: (line 70) 132
543: (line 70) 0
544: (line 70) LOAD_VAR
545: (line 70) LOAD_CONST
546: (line 70) 133
547: (line 70) 0
548: (line 70) LOAD_VAR
549: (line 70) LOAD_CONST
550: (line 70) 134
551: (line 70) 0
552: (line 70) ARRAY_DEF
553: (line 70) LOAD_CONST
554: (line 70) 135
555: (line 70) 0
556: (line 70) STORE_PROP
------------------------------
r.children = [rl, rr];
------------------------------
557: (line 72) LOAD_CONST
558: (line 72) 136
559: (line 72) 0
560: (line 72) LOAD_VAR
561: (line 72) LOAD_CONST
562: (line 72) 137
563: (line 72) 0
564: (line 72) LOAD_VAR
565: (line 72) LOAD_CONST
566: (line 72) 138
567: (line 72) 0
568: (line 72) LOAD_VAR
569: (line 72) LOAD_CONST
570: (line 72) 139
571: (line 72) 0
572: (line 72) ARRAY_DEF
573: (line 72) LOAD_CONST
574: (line 72) 140
575: (line 72) 0
576: (line 72) STORE_PROP
------------------------------
return r;
------------------------------
577: (line 74) LOAD_CONST
578: (line 74) 141
579: (line 74) 0
580: (line 74) LOAD_VAR
581: (line 74) RETURN
------------------------------
}
------------------------------
582: (line 75) LOAD_CONST
583: (line 75) 142
584: (line 75) 0
585: (line 75) RETURN
586: (line 75) FUNC_END
------------------------------
func bfs(var root) {
------------------------------
587: (line 77) LOAD_CONST
588: (line 77) 143
589: (line 77) 0
590: (line 77) FUNC_DEF
591: (line 77) LOAD_CONST
592: (line 77) 144
593: (line 77) 0
594: (line 77) DECLARE_VAR
------------------------------
var queue = new queue;
------------------------------
595: (line 78) LOAD_CONST
596: (line 78) 145
597: (line 78) 0
598: (line 78) NEW_OBJ
599: (line 78) LOAD_CONST
600: (line 78) 146
601: (line 78) 0
602: (line 78) DECLARE_VAR
------------------------------
queue_enqueue(queue, root);
------------------------------
603: (line 79) LOAD_CONST
604: (line 79) 147
605: (line 79) 0
606: (line 79) LOAD_VAR
607: (line 79) LOAD_CONST
608: (line 79) 148
609: (line 79) 0
610: (line 79) LOAD_VAR
611: (line 79) LOAD_CONST
612: (line 79) 149
613: (line 79) 0
614: (line 79) LOAD_VAR
615: (line 79) LOAD_CONST
616: (line 79) 150
617: (line 79) 0
618: (line 79) CALL
619: (line 79) LOAD_CONST
620: (line 79) 151
621: (line 79) 0
622: (line 79) STACK_CLEAR
------------------------------
while (!queue_is_empty(queue)) {
------------------------------
623: (line 81) LOAD_CONST
624: (line 81) 152
625: (line 81) 0
626: (line 81) LOAD_VAR
627: (line 81) LOAD_CONST
628: (line 81) 153
629: (line 81) 0
630: (line 81) LOAD_VAR
631: (line 81) LOAD_CONST
632: (line 81) 154
633: (line 81) 0
634: (line 81) CALL
635: (line 81) NEG
636: (line 81) LOAD_CONST
637: (line 81) 182
638: (line 81) 0
639: (line 81) JUMP_IF_FALSE
------------------------------
var node = queue_dequeue(queue);
------------------------------
640: (line 82) LOAD_CONST
641: (line 82) 156
642: (line 82) 0
643: (line 82) LOAD_VAR
644: (line 82) LOAD_CONST
645: (line 82) 157
646: (line 82) 0
647: (line 82) LOAD_VAR
648: (line 82) LOAD_CONST
649: (line 82) 158
650: (line 82) 0
651: (line 82) CALL
652: (line 82) LOAD_CONST
653: (line 82) 159
654: (line 82) 0
655: (line 82) DECLARE_VAR
------------------------------
print node.value;
------------------------------
656: (line 83) LOAD_CONST
657: (line 83) 160
658: (line 83) 0
659: (line 83) LOAD_VAR
660: (line 83) LOAD_CONST
661: (line 83) 161
662: (line 83) 0
663: (line 83) LOAD_PROP_CONST
664: (line 83) PRINT
------------------------------
print " ";
------------------------------
665: (line 84) LOAD_CONST
666: (line 84) 162
667: (line 84) 0
668: (line 84) PRINT
------------------------------
var i = 0;
------------------------------
669: (line 86) LOAD_CONST
670: (line 86) 163
671: (line 86) 0
672: (line 86) LOAD_CONST
673: (line 86) 164
674: (line 86) 0
675: (line 86) DECLARE_VAR
------------------------------
while (i < |node.children|) {
------------------------------
676: (line 87) LOAD_CONST
677: (line 87) 165
678: (line 87) 0
679: (line 87) LOAD_VAR
680: (line 87) LOAD_CONST
681: (line 87) 166
682: (line 87) 0
683: (line 87) LOAD_VAR
684: (line 87) LOAD_CONST
685: (line 87) 167
686: (line 87) 0
687: (line 87) LOAD_PROP_CONST
688: (line 87) SIZEOF
689: (line 87) CMP_LT
690: (line 87) LOAD_CONST
691: (line 87) 180
692: (line 87) 0
693: (line 87) JUMP_IF_FALSE
------------------------------
queue_enqueue(queue, node.children[i]);
------------------------------
694: (line 88) LOAD_CONST
695: (line 88) 169
696: (line 88) 0
697: (line 88) LOAD_VAR
698: (line 88) LOAD_CONST
699: (line 88) 170
700: (line 88) 0
701: (line 88) LOAD_VAR
702: (line 88) LOAD_CONST
703: (line 88) 171
704: (line 88) 0
705: (line 88) LOAD_VAR
706: (line 88) LOAD_CONST
707: (line 88) 172
708: (line 88) 0
709: (line 88) LOAD_PROP_CONST
710: (line 88) LOAD_CONST
711: (line 88) 173
712: (line 88) 0
713: (line 88) LOAD_VAR
714: (line 88) ARRAY_GET
715: (line 88) LOAD_CONST
716: (line 88) 174
717: (line 88) 0
718: (line 88) CALL
719: (line 88) LOAD_CONST
720: (line 88) 175
721: (line 88) 0
722: (line 88) STACK_CLEAR
------------------------------
i = i + 1;
------------------------------
723: (line 89) LOAD_CONST
724: (line 89) 176
725: (line 89) 0
726: (line 89) LOAD_VAR
727: (line 89) LOAD_CONST
728: (line 89) 177
729: (line 89) 0
730: (line 89) ADD
731: (line 89) LOAD_CONST
732: (line 89) 178
733: (line 89) 0
734: (line 89) STORE_VAR
------------------------------
}
------------------------------
735: (line 90) LOAD_CONST
736: (line 90) 179
737: (line 90) 0
738: (line 90) JUMP
------------------------------
}
------------------------------
739: (line 91) LOAD_CONST
740: (line 91) 181
741: (line 91) 0
742: (line 91) JUMP
------------------------------
}
------------------------------
743: (line 92) LOAD_CONST
744: (line 92) 183
745: (line 92) 0
746: (line 92) RETURN
747: (line 92) FUNC_END
------------------------------
func dfs(var root) {
------------------------------
748: (line 94) LOAD_CONST
749: (line 94) 184
750: (line 94) 0
751: (line 94) FUNC_DEF
752: (line 94) LOAD_CONST
753: (line 94) 185
754: (line 94) 0
755: (line 94) DECLARE_VAR
------------------------------
var stack = new stack;
------------------------------
756: (line 95) LOAD_CONST
757: (line 95) 186
758: (line 95) 0
759: (line 95) NEW_OBJ
760: (line 95) LOAD_CONST
761: (line 95) 187
762: (line 95) 0
763: (line 95) DECLARE_VAR
------------------------------
stack_push(stack, root);
------------------------------
764: (line 96) LOAD_CONST
765: (line 96) 188
766: (line 96) 0
767: (line 96) LOAD_VAR
768: (line 96) LOAD_CONST
769: (line 96) 189
770: (line 96) 0
771: (line 96) LOAD_VAR
772: (line 96) LOAD_CONST
773: (line 96) 190
774: (line 96) 0
775: (line 96) LOAD_VAR
776: (line 96) LOAD_CONST
777: (line 96) 191
778: (line 96) 0
779: (line 96) CALL
780: (line 96) LOAD_CONST
781: (line 96) 192
782: (line 96) 0
783: (line 96) STACK_CLEAR
------------------------------
while (!stack_is_empty(stack)) {
------------------------------
784: (line 98) LOAD_CONST
785: (line 98) 193
786: (line 98) 0
787: (line 98) LOAD_VAR
788: (line 98) LOAD_CONST
789: (line 98) 194
790: (line 98) 0
791: (line 98) LOAD_VAR
792: (line 98) LOAD_CONST
793: (line 98) 195
794: (line 98) 0
795: (line 98) CALL
796: (line 98) NEG
797: (line 98) LOAD_CONST
798: (line 98) 226
799: (line 98) 0
800: (line 98) JUMP_IF_FALSE
------------------------------
var node = stack_pop(stack);
------------------------------
801: (line 99) LOAD_CONST
802: (line 99) 197
803: (line 99) 0
804: (line 99) LOAD_VAR
805: (line 99) LOAD_CONST
806: (line 99) 198
807: (line 99) 0
808: (line 99) LOAD_VAR
809: (line 99) LOAD_CONST
810: (line 99) 199
811: (line 99) 0
812: (line 99) CALL
813: (line 99) LOAD_CONST
814: (line 99) 200
815: (line 99) 0
816: (line 99) DECLARE_VAR
------------------------------
print node.value;
------------------------------
817: (line 100) LOAD_CONST
818: (line 100) 201
819: (line 100) 0
820: (line 100) LOAD_VAR
821: (line 100) LOAD_CONST
822: (line 100) 202
823: (line 100) 0
824: (line 100) LOAD_PROP_CONST
825: (line 100) PRINT
------------------------------
print " ";
------------------------------
826: (line 101) LOAD_CONST
827: (line 101) 203
828: (line 101) 0
829: (line 101) PRINT
------------------------------
var i = 0;
------------------------------
830: (line 103) LOAD_CONST
831: (line 103) 204
832: (line 103) 0
833: (line 103) LOAD_CONST
834: (line 103) 205
835: (line 103) 0
836: (line 103) DECLARE_VAR
------------------------------
while (i < |node.children|) {
------------------------------
837: (line 104) LOAD_CONST
838: (line 104) 206
839: (line 104) 0
840: (line 104) LOAD_VAR
841: (line 104) LOAD_CONST
842: (line 104) 207
843: (line 104) 0
844: (line 104) LOAD_VAR
845: (line 104) LOAD_CONST
846: (line 104) 208
847: (line 104) 0
848: (line 104) LOAD_PROP_CONST
849: (line 104) SIZEOF
850: (line 104) CMP_LT
851: (line 104) LOAD_CONST
852: (line 104) 224
853: (line 104) 0
854: (line 104) JUMP_IF_FALSE
------------------------------
stack_push(stack, node.children[|node.children| - 1 - i]);
------------------------------
855: (line 105) LOAD_CONST
856: (line 105) 210
857: (line 105) 0
858: (line 105) LOAD_VAR
859: (line 105) LOAD_CONST
860: (line 105) 211
861: (line 105) 0
862: (line 105) LOAD_VAR
863: (line 105) LOAD_CONST
864: (line 105) 212
865: (line 105) 0
866: (line 105) LOAD_VAR
867: (line 105) LOAD_CONST
868: (line 105) 213
869: (line 105) 0
870: (line 105) LOAD_PROP_CONST
871: (line 105) LOAD_CONST
872: (line 105) 214
873: (line 105) 0
874: (line 105) LOAD_VAR
875: (line 105) LOAD_CONST
876: (line 105) 215
877: (line 105) 0
878: (line 105) LOAD_PROP_CONST
879: (line 105) SIZEOF
880: (line 105) LOAD_CONST
881: (line 105) 216
882: (line 105) 0
883: (line 105) SUB
884: (line 105) LOAD_CONST
885: (line 105) 217
886: (line 105) 0
887: (line 105) LOAD_VAR
888: (line 105) SUB
889: (line 105) ARRAY_GET
890: (line 105) LOAD_CONST
891: (line 105) 218
892: (line 105) 0
893: (line 105) CALL
894: (line 105) LOAD_CONST
895: (line 105) 219
896: (line 105) 0
897: (line 105) STACK_CLEAR
------------------------------
i = i + 1;
------------------------------
898: (line 106) LOAD_CONST
899: (line 106) 220
900: (line 106) 0
901: (line 106) LOAD_VAR
902: (line 106) LOAD_CONST
903: (line 106) 221
904: (line 106) 0
905: (line 106) ADD
906: (line 106) LOAD_CONST
907: (line 106) 222
908: (line 106) 0
909: (line 106) STORE_VAR
------------------------------
}
------------------------------
910: (line 107) LOAD_CONST
911: (line 107) 223
912: (line 107) 0
913: (line 107) JUMP
------------------------------
}
------------------------------
914: (line 108) LOAD_CONST
915: (line 108) 225
916: (line 108) 0
917: (line 108) JUMP
------------------------------
}
------------------------------
918: (line 109) LOAD_CONST
919: (line 109) 227
920: (line 109) 0
921: (line 109) RETURN
922: (line 109) FUNC_END
------------------------------
func dfs_recursive(var root) {
------------------------------
923: (line 111) LOAD_CONST
924: (line 111) 228
925: (line 111) 0
926: (line 111) FUNC_DEF
927: (line 111) LOAD_CONST
928: (line 111) 229
929: (line 111) 0
930: (line 111) DECLARE_VAR
------------------------------
print root.value;
------------------------------
931: (line 112) LOAD_CONST
932: (line 112) 230
933: (line 112) 0
934: (line 112) LOAD_VAR
935: (line 112) LOAD_CONST
936: (line 112) 231
937: (line 112) 0
938: (line 112) LOAD_PROP_CONST
939: (line 112) PRINT
------------------------------
print " ";
------------------------------
940: (line 113) LOAD_CONST
941: (line 113) 232
942: (line 113) 0
943: (line 113) PRINT
------------------------------
var i = 0;
------------------------------
944: (line 115) LOAD_CONST
945: (line 115) 233
946: (line 115) 0
947: (line 115) LOAD_CONST
948: (line 115) 234
949: (line 115) 0
950: (line 115) DECLARE_VAR
------------------------------
while (i < |root.children|) {
------------------------------
951: (line 116) LOAD_CONST
952: (line 116) 235
953: (line 116) 0
954: (line 116) LOAD_VAR
955: (line 116) LOAD_CONST
956: (line 116) 236
957: (line 116) 0
958: (line 116) LOAD_VAR
959: (line 116) LOAD_CONST
960: (line 116) 237
961: (line 116) 0
962: (line 116) LOAD_PROP_CONST
963: (line 116) SIZEOF
964: (line 116) CMP_LT
965: (line 116) LOAD_CONST
966: (line 116) 249
967: (line 116) 0
968: (line 116) JUMP_IF_FALSE
------------------------------
dfs_recursive(root.children[i]);
------------------------------
969: (line 117) LOAD_CONST
970: (line 117) 239
971: (line 117) 0
972: (line 117) LOAD_VAR
973: (line 117) LOAD_CONST
974: (line 117) 240
975: (line 117) 0
976: (line 117) LOAD_VAR
977: (line 117) LOAD_CONST
978: (line 117) 241
979: (line 117) 0
980: (line 117) LOAD_PROP_CONST
981: (line 117) LOAD_CONST
982: (line 117) 242
983: (line 117) 0
984: (line 117) LOAD_VAR
985: (line 117) ARRAY_GET
986: (line 117) LOAD_CONST
987: (line 117) 243
988: (line 117) 0
989: (line 117) CALL
990: (line 117) LOAD_CONST
991: (line 117) 244
992: (line 117) 0
993: (line 117) STACK_CLEAR
------------------------------
i = i + 1;
------------------------------
994: (line 118) LOAD_CONST
995: (line 118) 245
996: (line 118) 0
997: (line 118) LOAD_VAR
998: (line 118) LOAD_CONST
999: (line 118) 246
1000: (line 118) 0
1001: (line 118) ADD
1002: (line 118) LOAD_CONST
1003: (line 118) 247
1004: (line 118) 0
1005: (line 118) STORE_VAR
------------------------------
}
------------------------------
1006: (line 119) LOAD_CONST
1007: (line 119) 248
1008: (line 119) 0
1009: (line 119) JUMP
------------------------------
}
------------------------------
1010: (line 120) LOAD_CONST
1011: (line 120) 250
1012: (line 120) 0
1013: (line 120) RETURN
1014: (line 120) FUNC_END
------------------------------
func main() {
------------------------------
1015: (line 122) LOAD_CONST
1016: (line 122) 251
1017: (line 122) 0
1018: (line 122) FUNC_DEF
------------------------------
var root = tree_create();
------------------------------
1019: (line 123) LOAD_CONST
1020: (line 123) 252
1021: (line 123) 0
1022: (line 123) LOAD_VAR
1023: (line 123) LOAD_CONST
1024: (line 123) 253
1025: (line 123) 0
1026: (line 123) CALL
1027: (line 123) LOAD_CONST
1028: (line 123) 254
1029: (line 123) 0
1030: (line 123) DECLARE_VAR
------------------------------
print "BFS using Queue:       ";
------------------------------
1031: (line 125) LOAD_CONST
1032: (line 125) 255
1033: (line 125) 0
1034: (line 125) PRINT
------------------------------
bfs(root);
------------------------------
1035: (line 126) LOAD_CONST
1036: (line 126) 0
1037: (line 126) 1
1038: (line 126) LOAD_VAR
1039: (line 126) LOAD_CONST
1040: (line 126) 1
1041: (line 126) 1
1042: (line 126) LOAD_VAR
1043: (line 126) LOAD_CONST
1044: (line 126) 2
1045: (line 126) 1
1046: (line 126) CALL
1047: (line 126) LOAD_CONST
1048: (line 126) 3
1049: (line 126) 1
1050: (line 126) STACK_CLEAR
------------------------------
print "" endl;
------------------------------
1051: (line 127) LOAD_CONST
1052: (line 127) 4
1053: (line 127) 1
1054: (line 127) PRINT
1055: (line 127) ENDL
------------------------------
print "DFS using Stack:       ";
------------------------------
1056: (line 129) LOAD_CONST
1057: (line 129) 5
1058: (line 129) 1
1059: (line 129) PRINT
------------------------------
dfs(root);
------------------------------
1060: (line 130) LOAD_CONST
1061: (line 130) 6
1062: (line 130) 1
1063: (line 130) LOAD_VAR
1064: (line 130) LOAD_CONST
1065: (line 130) 7
1066: (line 130) 1
1067: (line 130) LOAD_VAR
1068: (line 130) LOAD_CONST
1069: (line 130) 8
1070: (line 130) 1
1071: (line 130) CALL
1072: (line 130) LOAD_CONST
1073: (line 130) 9
1074: (line 130) 1
1075: (line 130) STACK_CLEAR
------------------------------
print "" endl;
------------------------------
1076: (line 131) LOAD_CONST
1077: (line 131) 10
1078: (line 131) 1
1079: (line 131) PRINT
1080: (line 131) ENDL
------------------------------
print "DFS using Recursion:   ";
------------------------------
1081: (line 133) LOAD_CONST
1082: (line 133) 11
1083: (line 133) 1
1084: (line 133) PRINT
------------------------------
dfs_recursive(root);
------------------------------
1085: (line 134) LOAD_CONST
1086: (line 134) 12
1087: (line 134) 1
1088: (line 134) LOAD_VAR
1089: (line 134) LOAD_CONST
1090: (line 134) 13
1091: (line 134) 1
1092: (line 134) LOAD_VAR
1093: (line 134) LOAD_CONST
1094: (line 134) 14
1095: (line 134) 1
1096: (line 134) CALL
1097: (line 134) LOAD_CONST
1098: (line 134) 15
1099: (line 134) 1
1100: (line 134) STACK_CLEAR
------------------------------
print "";
------------------------------
1101: (line 135) LOAD_CONST
1102: (line 135) 16
1103: (line 135) 1
1104: (line 135) PRINT
------------------------------
}
------------------------------
1105: (line 136) LOAD_CONST
1106: (line 136) 17
1107: (line 136) 1
1108: (line 136) RETURN
1109: (line 136) FUNC_END
------------------------------
